<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">

    <!-- Manger管理 -->
    <bean id="securityManager"
          class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="shiroDbRealm"/>
    </bean>
    <!-- 项目自定义的Realm -->
    <bean id="shiroDbRealm" class="org.thframework.shiro.ShiroDbRealm"></bean>
    <!-- Shiro Filter -->
    <!--
    shiro过滤器
        （1）rest：例子/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user:method] ,其中method为post，get，delete等。
        （2）port：例子/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,
            其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString是你访问的url里的？后面的参数。
        （3）perms：例子/admins/user/**=perms[user:add:*],perms参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，
            例如/admins/user/**=perms["user:add:*,user:modify:*"]，
            当有多个参数时必须每个参数都通过才通过，想当于isPermitedAll()方法。
        （4）roles：例子/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，当有多个参数时，
            例如/admins/user/**=roles["admin,guest"],每个参数通过才算通过，相当于hasAllRoles()方法。
        （5）anon：例子/admins/**=anon 没有参数，表示可以匿名使用。
        （6）authc：例如/admins/user/**=authc表示需要认证才能使用，没有参数
        （7）authcBasic：例如/admins/user/**=authcBasic没有参数表示httpBasic认证
        （8）ssl：例子/admins/user/**=ssl没有参数，表示安全的url请求，协议为https
        （9）user：例如/admins/user/**=user没有参数表示必须存在用户，当登入操作时不做检查
    -->
    <bean id="shiroFilter"
          class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="successUrl" value="/login/main"/>
        <property name="unauthorizedUrl" value="unauthorized"/>
        <property name="loginUrl" value="/admin"/>
        <property name="filterChainDefinitions">
            <value>
                /admin/login = anon
                /admin/register = anon
                <!--/index/weather = perms[User:create]-->
                /index/weather = authc
                /admin/** = authc
            </value>
        </property>
    </bean>
    <!-- 开启Shiro注解的Spring配置方式的beans。在lifecycleBeanPostProcessor之后运行 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true"/>
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    <!--  -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- shiro为集成spring -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.apache.shiro.authz.UnauthorizedException">/login1</prop>
                <prop key="org.apache.shiro.authz.UnauthenticatedException">/login2</prop>
            </props>
        </property>
    </bean>
</beans>